{
    "type_of": "article",
    "id": 86924,
    "title": "CSS can do that?",
    "description": "A list of amazing things that CSS can do",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--luy4Djca--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/1s5uz7cylwxtoybknebu.png",
    "published_at": "2019-05-17T21:42:09.949Z",
    "readable_publish_date": "May 17",
    "social_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--7oLnFjCs--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://thepracticaldev.s3.amazonaws.com/i/1s5uz7cylwxtoybknebu.png",
    "tag_list": "webdev, css",
    "tags": [
        "webdev",
        "css"
    ],
    "slug": "css-can-do-that-18g7",
    "path": "/ananyaneogi/css-can-do-that-18g7",
    "url": "https://dev.to/ananyaneogi/css-can-do-that-18g7",
    "canonical_url": "https://dev.to/ananyaneogi/css-can-do-that-18g7",
    "comments_count": 30,
    "positive_reactions_count": 653,
    "published_timestamp": "2019-05-17T21:42:09Z",
    "body_html": "<p>A list of amazing things that CSS can do! </p>\n\n<h2>\n  <a name=\"1-raw-boxdecorationbreak-endraw-\" href=\"#1-raw-boxdecorationbreak-endraw-\" class=\"anchor\">\n  </a>\n  1. <code>box-decoration-break</code>\n</h2>\n\n<p>This CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.<br>\n<iframe height=\"600\" src=\"https://codepen.io/ananyaneogi/embed/GeRoRO?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" style=\"width: 100%;\">\n</iframe>\n</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"2-raw-attr-endraw-\" href=\"#2-raw-attr-endraw-\" class=\"anchor\">\n  </a>\n  2. <code>attr()</code>\n</h2>\n\n<p>We can retrieve values of the selected element in CSS by using <code>attr()</code>. This method could be really helpful with accessibility purposes.<br>\n<iframe height=\"600\" src=\"https://codepen.io/ananyaneogi/embed/gEpeda?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" style=\"width: 100%;\">\n</iframe>\n</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"3-raw-backfacevisibility-endraw-\" href=\"#3-raw-backfacevisibility-endraw-\" class=\"anchor\">\n  </a>\n  3. <code>backface-visibility</code>\n</h2>\n\n<p>This CSS property sets whether the back face of an element is visible when turned towards the user. Thinking of a card flip UI?</p>\n\n<p><iframe height=\"600\" src=\"https://codepen.io/ananyaneogi/embed/Ezmyeb?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" style=\"width: 100%;\">\n</iframe>\n</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"4-raw-conicgradient-endraw-\" href=\"#4-raw-conicgradient-endraw-\" class=\"anchor\">\n  </a>\n  4. <code>conic-gradient</code>\n</h2>\n\n<p>Gradients are a wonderful thing. You might've used to style backgrounds with linear gradients but do you know we can use pure css to create pie charts with the help of <code>conic-gradient</code>!</p>\n\n<p><iframe height=\"600\" src=\"https://codepen.io/ananyaneogi/embed/mYmrMJ?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" style=\"width: 100%;\">\n</iframe>\n</p>\n\n<p>To better understand how <code>conic-gradients</code>, reference the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/conic-gradient\">MDN docs on it</a></p>\n\n\n<hr>\n\n<h2>\n  <a name=\"5-raw-filter-endraw-\" href=\"#5-raw-filter-endraw-\" class=\"anchor\">\n  </a>\n  5. <code>filter</code>\n</h2>\n\n<p>Who needs photoshop filter effects when you have CSS filters. ðŸ™ƒ<br>\nFilter functions applies graphical changes to the appearance of an input image. The effects we can achieve are as follows - <code>blur</code>, <code>brightness</code>, <code>contrast</code>, <code>grayscale</code>, <code>hue-rotate</code>, <code>opacity</code>, <code>invert</code>, <code>sepia</code>, <code>saturate</code>, <code>drop-shadow</code>.</p>\n\n<p><iframe height=\"600\" src=\"https://codepen.io/ananyaneogi/embed/YbVpyG?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" style=\"width: 100%;\">\n</iframe>\n</p>\n\n<p><code>drop-shadow</code> filter is pretty amazing. It lets you apply drop shadow to the input image. <br>\n<iframe height=\"600\" src=\"https://codepen.io/ananyaneogi/embed/PvmbeR?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" style=\"width: 100%;\">\n</iframe>\n</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"6-raw-mixblendmode-endraw-\" href=\"#6-raw-mixblendmode-endraw-\" class=\"anchor\">\n  </a>\n  6. <code>mix-blend-mode</code>\n</h2>\n\n<p>This CSS property sets how an element's content should blend with the content of the element's background or its parent.</p>\n\n<p><iframe height=\"600\" src=\"https://codepen.io/ananyaneogi/embed/rgwNLx?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" style=\"width: 100%;\">\n</iframe>\n<br>\nAmazing things can be achieved by mixing blend modes and filters with images and text. Learn more on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode\">MDN Docs.</a></p>\n\n<hr>\n<h2>\n  <a name=\"7-raw-firstletter-endraw-\" href=\"#7-raw-firstletter-endraw-\" class=\"anchor\">\n  </a>\n  7. <code>first-letter</code>\n</h2>\n\n<p>One of my favourite things in books and magazines are the beautiful drop-caps. We can create drop with <code>first-letter</code> pseudo-element.<br>\n<iframe height=\"600\" src=\"https://codepen.io/ananyaneogi/embed/oRWBBE?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" style=\"width: 100%;\">\n</iframe>\n</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"8-raw-shapeoutside-endraw-\" href=\"#8-raw-shapeoutside-endraw-\" class=\"anchor\">\n  </a>\n  8. <code>shape-outside</code>\n</h2>\n\n<p>This CSS property provides a way to customise wrapping adjacent inline content around complex objects rather than simple rectangular boxes.</p>\n\n<p><iframe height=\"600\" src=\"https://codepen.io/ananyaneogi/embed/ZNKepv?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" style=\"width: 100%;\">\n</iframe>\n<br>\n<em>Open the example in a different tab and try changing the width of the window and notice how the text wraps around the image.</em></p>\n\n<hr>\n<h2>\n  <a name=\"9-raw-writingmode-endraw-\" href=\"#9-raw-writingmode-endraw-\" class=\"anchor\">\n  </a>\n  9. <code>writing-mode</code>\n</h2>\n\n<p>This CSS property sets whether the lines of text are laid out horizontally or vertically. We can have these values-</p>\n\n<ul>\n<li>\n<code>horizontal-tb</code> - Content flows horizontally from left to right, vertically from top to bottom.</li>\n<li>\n<code>vertical-lr</code> - Content flows horizontally from left to right, vertically from top to bottom.</li>\n<li>\n<code>vertical-rl</code> - Content flows horizontally from right to left, vertically from top to bottom.</li>\n</ul>\n\n<p>Checkout this <a href=\"https://ananyaneogi.github.io/css-experiments/quote.html\">this example</a> to see it in action.</p>\n\n<hr>\n<h2>\n  <a name=\"10-adding-gradient-to-text\" href=\"#10-adding-gradient-to-text\" class=\"anchor\">\n  </a>\n  10. Adding gradient to text\n</h2>\n\n<p>This is achieved with the combination of <code>-webkit-background-clip: text</code> and <code>-webkit-text-fill-color: transparent</code> CSS properties.</p>\n\n<p><iframe height=\"600\" src=\"https://codepen.io/ananyaneogi/embed/pmPPpY?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" style=\"width: 100%;\">\n</iframe>\n</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"11-smooth-scroll-snap\" href=\"#11-smooth-scroll-snap\" class=\"anchor\">\n  </a>\n  11. Smooth scroll snap\n</h2>\n\n<p><code>scroll-snap-type</code> CSS property sets how snap points are applied on the scroll container.</p>\n\n<p><iframe height=\"600\" src=\"https://codepen.io/ananyaneogi/embed/mYmodx?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" style=\"width: 100%;\">\n</iframe>\n</p>\n\n<p>This example shows vertical(<code>y</code>) scroll with value <code>mandatory</code>. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type\">MDN docs</a> does a great job on explaining how to use other values such as <code>proximity</code> and horizontal scroll(<code>x</code>).</p>\n\n\n<hr>\n\n<p>These are just a few great things CSS can do. Possibilities are endless! ðŸ¥³</p>\n\n",
    "ltag_style": [
        ""
    ],
    "ltag_script": [
        ""
    ],
    "user": {
        "name": "Ananya Neogi",
        "username": "ananyaneogi",
        "twitter_username": "_ananyaneogi",
        "github_username": "ananyaneogi",
        "website_url": "https://ananyaneogi.com",
        "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--Ektp50R0--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/106991/b638bf70-656a-4a24-810e-4b302265d982.jpeg",
        "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--gv_CWUYL--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://thepracticaldev.s3.amazonaws.com/uploads/user/profile_image/106991/b638bf70-656a-4a24-810e-4b302265d982.jpeg"
    }
}
